import socket
import threading
import pygame
import random
import queue
import time
import math

IP = "127.0.0.1"
PORT = 5571
ADDR = (IP, PORT)
size = 1024
class threadServer(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.host = host
        self.port = port
        self.players = []
        self.counter = 0  #counts the total players in game
        self.players_locations = {}
        self.addresses = queue.Queue()
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.server_socket.bind((self.host, self.port))
        self.subServersAddr = {}
        self.startPlayers = {}

        #area of sub servers in the beggining
        self.subServers = {1:[((50,3000),(50,12050))], 2:[((3000,6000), (50,12050))], 3:[((6000,9000), (50,12050))], 4:[((9000,12050), (50,12050))]}

    def makePosition(self):
        return (random.randint(50, 12050), random.randint(50, 12050))

    def run(self):
        print("Server is up and running")
        while True:
            (data, addr) = self.server_socket.recvfrom(1024)
            information = data.decode()
            print("got: ", information)
            if information == "out":
                del self.players_locations[addr]

            elif "Hello" in information and addr not in self.players:
                if "player" in information:
                    print("********************new player***********************************")
                    #adding the new player
                    self.counter += 1
                    self.players.append(addr)

                    #making and sending random  position for the new player:
                    cPosition = self.makePosition()
                    self.players_locations[addr] = cPosition
                    print("PlAYERS: ", self.players_locations)
                    self.server_socket.sendto((str(cPosition)).encode(), addr)
                    clientServer = self.sortPlayers(cPosition)
                    self.server_socket.sendto((str(self.subServers[clientServer][1])).encode(), addr)
                    self.change_areas(information)




                if "server" in information: #devide each server when connecting
                    print("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&server")
                    num = findNumOfSubServer(information)
                    self.subServers[num].append(addr)
                    print(self.subServers[num])
                    self.server_socket.sendto((str(self.subServers[num][0])).encode(), addr)

            elif "change server" in information:    #gets new position from other subserver
                clientTransfer, clientLoc = addr_to_tuple(information)
                n = self.sortPlayers(clientLoc)
                print("address of client to transfer: ", clientTransfer)
                self.server_socket.sendto(("change server " + str(self.subServers[n][1])).encode(), clientTransfer)
                self.change_areas(information)




    def check_response_time(self, server):  # returns the RTT between main Server and SubServer ro see the subserver load
        start = time.perf_counter()
        self.server_socket.sendto("time".encode(), server)
        (response, serverAddr) = self.server_socket.recvfrom(1024)
        return time.perf_counter() - start

    def sortPlayers(self, location):  # finds the players subserver
        x = location[0]
        if x >= self.subServers[1][0][0][0] and x <= self.subServers[1][0][0][1]:
            return 1
        if x >= self.subServers[2][0][0][0] and x <= self.subServers[2][0][0][1]:
            return 2
        if x >= self.subServers[3][0][0][0] and x <= self.subServers[3][0][0][1]:
            return 3
        if x >= self.subServers[4][0][0][0] and x <= self.subServers[4][0][0][1]:
            return 4

    def change_areas(self, information):
        times = {}
        for i in self.subServers:
            time = self.check_response_time(self.subServers[i][1])
            print(f" server {i} time: {time}")
            if time > 10:
                print("changing server number ", i)
                if i == 1:
                    self.subServers[i][0] = ((self.subServers[i][0][0][0], self.subServers[i][0][0][1] - 100),
                                             (self.subServers[i][0][1][0], self.subServers[i][0][1][1]))
                    print("new rate" + str(self.subServers[i][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[i][0])).encode(), self.subServers[i][1])
                    self.subServers[2][0] = (
                    (self.subServers[2][0][0][0] - 100, self.subServers[2][0][0][1]), self.subServers[2][0][1])
                    print("new rate" + str(self.subServers[2][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[2][0])).encode(), self.subServers[2][1])
                elif i == 2:
                    self.subServers[i][0] = ((self.subServers[i][0][0][0] + 100, self.subServers[i][0][0][1]),
                                             (self.subServers[i][0][1][0], self.subServers[i][0][1][1]))
                    print("new rate" + str(self.subServers[i][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[i][0])).encode(), self.subServers[i][1])

                    self.subServers[1][0] = (
                    (self.subServers[1][0][0][0], self.subServers[1][0][0][1] + 100), self.subServers[1][0][1])
                    print("new rate" + str(self.subServers[1][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[1][0])).encode(), self.subServers[1][1])
                elif i == 3:
                    self.subServers[i][0] = ((self.subServers[i][0][0][0], self.subServers[i][0][0][1] - 100),
                                             (self.subServers[i][0][1][0], self.subServers[i][0][1][1]))
                    print("new rate" + str(self.subServers[i][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[i][0])).encode(), self.subServers[i][1])

                    self.subServers[4][0] = (
                    (self.subServers[4][0][0][0] - 100, self.subServers[4][0][0][1]), self.subServers[4][0][1])
                    print("new rate" + str(self.subServers[4][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[4][0])).encode(), self.subServers[4][1])
                elif i == 4:
                    self.subServers[i][0] = ((self.subServers[i][0][0][0] + 100, self.subServers[i][0][0][1]),
                                             (self.subServers[i][0][1][0], self.subServers[i][0][1][1]))
                    print("new rate" + str(self.subServers[i][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[i][0])).encode(), self.subServers[i][1])

                    self.subServers[3][0] = (
                    (self.subServers[3][0][0][0], self.subServers[3][0][0][1] + 100), self.subServers[3][0][1])
                    print("new rate" + str(self.subServers[3][0]))
                    self.server_socket.sendto(("new rate" + str(self.subServers[3][0])).encode(), self.subServers[3][1])

            times[i] = time
        print("times = ", times)

def findNumOfSubServer(st: str):
    i = st.find("server")
    l = len("server")
    return int(st[i+l:])

# find client address and client location
def addr_to_tuple(st: str):
    start = st.find("(")
    mid = st.find(",")
    en = st.find(")")
    addr = (str(st[start + 2:mid-1]), int(st[mid + 1:en]))
    start = st.find("(", en)
    mid = st.find(",", start)
    en = st.find(")", mid)
    loc = (int(st[start + 1:mid]), int(st[mid + 1: en]))
    return addr, loc



if __name__ == '__main__':
        s = threadServer(IP, PORT)
        s.start()
        s.join()
